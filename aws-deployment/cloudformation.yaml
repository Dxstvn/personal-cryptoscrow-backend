AWSTemplateFormatVersion: '2010-09-09'
Description: 'CryptoEscrow Backend Infrastructure'

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access
  
  InstanceType:
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
    Description: EC2 instance type
  
  AllowedSSHCIDR:
    Type: String
    Default: 0.0.0.0/0
    Description: CIDR block allowed for SSH access (restrict this for production)
  
  DomainName:
    Type: String
    Default: ""
    Description: Optional domain name for the application

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: CryptoEscrow-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: CryptoEscrow-IGW

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: CryptoEscrow-Public-Subnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: CryptoEscrow-Public-RT

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  WebServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: CryptoEscrow-WebServer-SG
      GroupDescription: Security group for CryptoEscrow web server
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref AllowedSSHCIDR
          Description: SSH access
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: HTTP access
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: HTTPS access
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
          Description: Node.js application port
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: All outbound traffic
      Tags:
        - Key: Name
          Value: CryptoEscrow-WebServer-SG

  # IAM Role for EC2 to access Secrets Manager
  EC2SecretsManagerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CryptoEscrow-EC2-SecretsManager-Role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: SecretsManagerAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: 
                  - !Ref CryptoEscrowSecrets
                  - !Ref BlockchainSecrets
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: '*'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: CryptoEscrow-EC2-Profile
      Roles:
        - !Ref EC2SecretsManagerRole

  # Secrets Manager
  CryptoEscrowSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: CryptoEscrow/App/Config
      Description: Application configuration secrets for CryptoEscrow
      SecretString: !Sub |
        {
          "JWT_SECRET": "REPLACE_WITH_ACTUAL_JWT_SECRET",
          "ENCRYPTION_KEY": "REPLACE_WITH_ACTUAL_ENCRYPTION_KEY",
          "DATABASE_ENCRYPTION_KEY": "REPLACE_WITH_ACTUAL_DB_ENCRYPTION_KEY",
          "SMTP_HOST": "smtp.gmail.com",
          "SMTP_PORT": "587",
          "SMTP_USER": "REPLACE_WITH_ACTUAL_EMAIL",
          "SMTP_PASS": "REPLACE_WITH_ACTUAL_PASSWORD",
          "INFURA_API_KEY": "REPLACE_WITH_ACTUAL_INFURA_KEY",
          "ALCHEMY_API_KEY": "REPLACE_WITH_ACTUAL_ALCHEMY_KEY"
        }

  BlockchainSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: CryptoEscrow/Blockchain/Keys
      Description: Blockchain private keys for CryptoEscrow
      SecretString: !Sub |
        {
          "DEPLOYER_PRIVATE_KEY": "REPLACE_WITH_ACTUAL_DEPLOYER_KEY",
          "BACKEND_WALLET_PRIVATE_KEY": "REPLACE_WITH_ACTUAL_BACKEND_WALLET_KEY"
        }

  # EC2 Instance
  WebServerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0230bd60aa48260c6  # Amazon Linux 2023 AMI (us-east-1)
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyPairName
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroupIds:
        - !Ref WebServerSecurityGroup
      SubnetId: !Ref PublicSubnet
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          
          # Install Node.js 18
          curl -fsSL https://rpm.nodesource.com/setup_18.x | sudo bash -
          yum install -y nodejs
          
          # Install Git, AWS CLI, and other utilities
          yum install -y git aws-cli nginx certbot python3-certbot-nginx
          
          # Install PM2 globally
          npm install -g pm2
          
          # Create application directory
          mkdir -p /home/ec2-user/app
          chown ec2-user:ec2-user /home/ec2-user/app
          
          # Install CloudWatch agent
          wget https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
          rpm -U ./amazon-cloudwatch-agent.rpm
          
          # Create systemd service for the application
          cat > /etc/systemd/system/cryptoescrow.service << 'EOF'
          [Unit]
          Description=CryptoEscrow Backend
          After=network.target
          
          [Service]
          Type=forking
          User=ec2-user
          WorkingDirectory=/home/ec2-user/app
          ExecStart=/usr/bin/pm2 start ecosystem.config.js --env production
          ExecReload=/usr/bin/pm2 reload ecosystem.config.js --env production
          ExecStop=/usr/bin/pm2 delete ecosystem.config.js
          Restart=always
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          systemctl daemon-reload
          systemctl enable cryptoescrow
          
          # Signal that the instance is ready
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource WebServerInstance --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: CryptoEscrow-WebServer
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M

Outputs:
  PublicIP:
    Description: Public IP address of the web server
    Value: !GetAtt WebServerInstance.PublicIp
    Export:
      Name: !Sub ${AWS::StackName}-PublicIP
  
  PublicDNS:
    Description: Public DNS name of the web server
    Value: !GetAtt WebServerInstance.PublicDnsName
    Export:
      Name: !Sub ${AWS::StackName}-PublicDNS
  
  SecretsManagerAppConfig:
    Description: ARN of the application secrets
    Value: !Ref CryptoEscrowSecrets
    Export:
      Name: !Sub ${AWS::StackName}-AppSecrets
  
  SecretsManagerBlockchainKeys:
    Description: ARN of the blockchain secrets
    Value: !Ref BlockchainSecrets
    Export:
      Name: !Sub ${AWS::StackName}-BlockchainSecrets
  
  SecurityGroupId:
    Description: Security Group ID for the web server
    Value: !Ref WebServerSecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-SecurityGroup 