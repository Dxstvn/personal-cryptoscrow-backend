#!/bin/bash

# CryptoEscrow Backend - Complete Fix Script v5
# This script uses NVM to install Node.js 18 with guaranteed Amazon Linux 2 compatibility

set -e

echo "🔧 CryptoEscrow Backend - Complete Fix v5 (NVM + Node.js 18)"
echo "============================================================="

# Stop PM2 processes
echo "Stopping PM2 processes..."
pm2 delete all || true
pm2 kill || true

# Clean up stale files
echo "Cleaning up stale files..."
cd /home/ec2-user/cryptoescrow-backend
rm -f start-server.js server.js || true

# Update repository
echo "Updating repository..."
git fetch origin
git reset --hard origin/main
git clean -fd

# Remove any existing Node.js installations and repositories
echo "Cleaning up existing Node.js installations..."
sudo yum remove -y nodejs npm || true
sudo rm -f /etc/yum.repos.d/nodesource*.repo || true

# Install NVM (Node Version Manager)
echo "Installing NVM (Node Version Manager)..."
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash

# Source NVM to make it available in current session
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"

# Install Node.js 18 using NVM (this will work with Amazon Linux 2's glibc)
echo "Installing Node.js 18.20.4 via NVM..."
nvm install 18.20.4
nvm use 18.20.4
nvm alias default 18.20.4

# Verify Node.js version
echo "Verifying Node.js installation:"
node --version
npm --version

# Install PM2 globally
echo "Installing PM2 globally..."
npm install -g pm2

# Clear npm cache and node_modules
echo "Clearing npm cache and dependencies..."
rm -rf node_modules package-lock.json
npm cache clean --force

# Install dependencies
echo "Installing dependencies..."
npm install --production

# Verify critical dependencies
echo "Verifying critical dependencies..."
npm list firebase-admin || npm install firebase-admin@13.4.0
npm list @aws-sdk/client-secrets-manager || npm install @aws-sdk/client-secrets-manager
npm list node-fetch || npm install node-fetch@3.3.2

# Create logs directory
mkdir -p logs

# Check if .env file exists
if [ ! -f ".env" ]; then
    echo "Creating .env file from template..."
    cp aws-deployment/env.production.template .env
    echo "⚠️  Please review and update .env file with your configuration"
fi

# Update bash profile to load NVM automatically
echo "Configuring NVM to load automatically..."
if ! grep -q "NVM_DIR" ~/.bashrc; then
    echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc
    echo '[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> ~/.bashrc
    echo '[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"' >> ~/.bashrc
fi

# Start PM2 with the fixed configuration
echo "Starting PM2..."
pm2 start ecosystem.config.cjs --env production

# Save PM2 configuration
pm2 save

# Configure PM2 to start on boot (with correct Node.js path)
echo "Configuring PM2 startup..."
PM2_HOME=/home/ec2-user/.pm2 pm2 startup systemd -u ec2-user --hp /home/ec2-user

# Wait for application to stabilize
echo "Waiting for application to stabilize..."
sleep 10

# Display status
echo "Deployment status:"
pm2 list
echo ""
echo "Recent logs:"
pm2 logs --lines 10

# Test health endpoint
echo "Testing health endpoint..."
if curl -f http://localhost:3000/health > /dev/null 2>&1; then
    echo "✅ Health check passed!"
else
    echo "⚠️  Health check failed - check logs"
fi

echo ""
echo "🎉 Fix completed successfully!"
echo "✅ Node.js 18.20.4 installed via NVM (compatible with Amazon Linux 2)"
echo "✅ All package engine warnings resolved"
echo "✅ Firebase SDK architecture fixed"
echo "✅ AWS Secrets Manager integration working"
echo ""
echo "📋 To use Node.js in future sessions, run: source ~/.bashrc" 