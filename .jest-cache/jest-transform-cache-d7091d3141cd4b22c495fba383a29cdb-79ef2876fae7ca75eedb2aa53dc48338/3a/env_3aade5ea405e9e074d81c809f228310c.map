{"version":3,"names":["dotenv","path","fileURLToPath","awsSecretsManager","__filename","import","meta","url","__dirname","dirname","config","resolve","override","process","env","NODE_ENV","loadAWSSecrets","isAWSEnvironment","console","log","appSecrets","getAppSecrets","Object","keys","forEach","key","blockchainSecrets","getBlockchainSecrets","error","message","exit","validateEnvVars","requiredVars","missing","filter","varName","length","Error","join","PORT","FRONTEND_URL","AWS_REGION","USE_AWS_SECRETS","FIREBASE_PROJECT_ID","FIREBASE_STORAGE_BUCKET","FIREBASE_API_KEY","FIREBASE_AUTH_DOMAIN","FIREBASE_MESSAGING_SENDER_ID","FIREBASE_APP_ID","FIREBASE_MEASUREMENT_ID","GOOGLE_APPLICATION_CREDENTIALS","RPC_URL","SEPOLIA_RPC_URL","CHAIN_ID","DEPLOYER_PRIVATE_KEY","BACKEND_WALLET_PRIVATE_KEY","JWT_SECRET","ENCRYPTION_KEY","DATABASE_ENCRYPTION_KEY","ALLOWED_EMAILS","SMTP_HOST","SMTP_PORT","SMTP_USER","SMTP_PASS","TEST_USER_A_EMAIL","TEST_USER_A_PASSWORD","TEST_USER_A_PK","TEST_USER_B_EMAIL","TEST_USER_B_PASSWORD","TEST_USER_B_PK","FIRESTORE_EMULATOR_HOST","FIREBASE_AUTH_EMULATOR_HOST","FIREBASE_STORAGE_EMULATOR_HOST","CRON_SCHEDULE_DEADLINE_CHECKS","INFURA_API_KEY","ALCHEMY_API_KEY"],"sources":["env.js"],"sourcesContent":["import dotenv from 'dotenv';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport awsSecretsManager from './awsSecretsManager.js';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Load .env first (public variables)\ndotenv.config({ \n  path: path.resolve(__dirname, '../../.env'),\n  override: false  // Don't override if already set\n});\n\n// Only load .env.local in non-test environments to prevent overriding test configuration\nif (process.env.NODE_ENV !== 'test') {\n  // Load .env.local second (private variables, will override .env if needed)\n  dotenv.config({ \n    path: path.resolve(__dirname, '../../.env.local'),\n    override: true   // Override existing values\n  });\n}\n\n// Load secrets from AWS Secrets Manager in production\nasync function loadAWSSecrets() {\n  if (awsSecretsManager.isAWSEnvironment()) {\n    try {\n      console.log('🔐 Loading secrets from AWS Secrets Manager...');\n      \n      // Load application secrets\n      const appSecrets = await awsSecretsManager.getAppSecrets();\n      Object.keys(appSecrets).forEach(key => {\n        if (!process.env[key]) { // Don't override existing env vars\n          process.env[key] = appSecrets[key];\n        }\n      });\n      \n      // Load blockchain secrets\n      const blockchainSecrets = await awsSecretsManager.getBlockchainSecrets();\n      Object.keys(blockchainSecrets).forEach(key => {\n        if (!process.env[key]) { // Don't override existing env vars\n          process.env[key] = blockchainSecrets[key];\n        }\n      });\n      \n      console.log('✅ AWS Secrets Manager integration successful');\n    } catch (error) {\n      console.error('❌ Failed to load secrets from AWS Secrets Manager:', error.message);\n      // In production, we might want to exit the process if secrets can't be loaded\n      if (process.env.NODE_ENV === 'production') {\n        console.error('🚨 Cannot start application without required secrets in production');\n        process.exit(1);\n      }\n    }\n  }\n}\n\n// Export a function to validate required environment variables\nexport function validateEnvVars(requiredVars = []) {\n  const missing = requiredVars.filter(varName => !process.env[varName]);\n  \n  if (missing.length > 0) {\n    throw new Error(`Missing required environment variables: ${missing.join(', ')}`);\n  }\n}\n\n// Export common environment configurations\nexport const config = {\n  NODE_ENV: process.env.NODE_ENV || 'development',\n  PORT: process.env.PORT || 3000,\n  FRONTEND_URL: process.env.FRONTEND_URL,\n  \n  // AWS Configuration\n  AWS_REGION: process.env.AWS_REGION || 'us-east-1',\n  USE_AWS_SECRETS: process.env.USE_AWS_SECRETS || 'false',\n  \n  // Firebase config\n  FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n  FIREBASE_STORAGE_BUCKET: process.env.FIREBASE_STORAGE_BUCKET,\n  FIREBASE_API_KEY: process.env.FIREBASE_API_KEY,\n  FIREBASE_AUTH_DOMAIN: process.env.FIREBASE_AUTH_DOMAIN,\n  FIREBASE_MESSAGING_SENDER_ID: process.env.FIREBASE_MESSAGING_SENDER_ID,\n  FIREBASE_APP_ID: process.env.FIREBASE_APP_ID,\n  FIREBASE_MEASUREMENT_ID: process.env.FIREBASE_MEASUREMENT_ID,\n  GOOGLE_APPLICATION_CREDENTIALS: process.env.GOOGLE_APPLICATION_CREDENTIALS,\n  \n  // Blockchain config\n  RPC_URL: process.env.RPC_URL,\n  SEPOLIA_RPC_URL: process.env.SEPOLIA_RPC_URL,\n  CHAIN_ID: process.env.CHAIN_ID,\n  DEPLOYER_PRIVATE_KEY: process.env.DEPLOYER_PRIVATE_KEY,\n  BACKEND_WALLET_PRIVATE_KEY: process.env.BACKEND_WALLET_PRIVATE_KEY,\n  \n  // Security\n  JWT_SECRET: process.env.JWT_SECRET,\n  ENCRYPTION_KEY: process.env.ENCRYPTION_KEY,\n  DATABASE_ENCRYPTION_KEY: process.env.DATABASE_ENCRYPTION_KEY,\n  ALLOWED_EMAILS: process.env.ALLOWED_EMAILS,\n  \n  // Email config\n  SMTP_HOST: process.env.SMTP_HOST,\n  SMTP_PORT: process.env.SMTP_PORT,\n  SMTP_USER: process.env.SMTP_USER,\n  SMTP_PASS: process.env.SMTP_PASS,\n  \n  // Test config\n  TEST_USER_A_EMAIL: process.env.TEST_USER_A_EMAIL,\n  TEST_USER_A_PASSWORD: process.env.TEST_USER_A_PASSWORD,\n  TEST_USER_A_PK: process.env.TEST_USER_A_PK,\n  TEST_USER_B_EMAIL: process.env.TEST_USER_B_EMAIL,\n  TEST_USER_B_PASSWORD: process.env.TEST_USER_B_PASSWORD,\n  TEST_USER_B_PK: process.env.TEST_USER_B_PK,\n  \n  // Emulator config\n  FIRESTORE_EMULATOR_HOST: process.env.FIRESTORE_EMULATOR_HOST,\n  FIREBASE_AUTH_EMULATOR_HOST: process.env.FIREBASE_AUTH_EMULATOR_HOST,\n  FIREBASE_STORAGE_EMULATOR_HOST: process.env.FIREBASE_STORAGE_EMULATOR_HOST,\n  \n  // Scheduled jobs\n  CRON_SCHEDULE_DEADLINE_CHECKS: process.env.CRON_SCHEDULE_DEADLINE_CHECKS,\n  \n  // API Keys\n  INFURA_API_KEY: process.env.INFURA_API_KEY,\n  ALCHEMY_API_KEY: process.env.ALCHEMY_API_KEY,\n};\n\n// Initialize AWS secrets loading\nawait loadAWSSecrets();\n\n// Log environment loading status (only in development)\nif (config.NODE_ENV === 'development') {\n  console.log('🔧 Environment variables loaded from .env and .env.local');\n} else if (config.NODE_ENV === 'production') {\n  console.log('🔧 Production environment variables loaded');\n} "],"mappings":"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","ignoreList":[]}