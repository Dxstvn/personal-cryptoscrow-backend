{"version":3,"names":["getFirestore","Timestamp","FieldValue","getAdminApp","admin","dbInstance","getDb","process","env","NODE_ENV","console","log","firestore","e","error","message","adminApp","getDealsPastFinalApproval","now","db","snapshot","collection","where","get","empty","docs","map","doc","id","data","getDealsPastDisputeDeadline","updateDealStatusInDB","dealId","updateData","status","timelineEventMessage","dealRef","timelineEvent","event","timestamp","systemTriggered","autoReleaseTxHash","transactionHash","autoCancelTxHash","firestoreUpdateData","updatedAt","timeline","arrayUnion","processingError","lastAutomaticProcessAttempt","update","getDealById","docRef","docSnap","exists"],"sources":["databaseService.js"],"sourcesContent":["// src/services/databaseService.js\nimport { getFirestore, Timestamp, FieldValue } from 'firebase-admin/firestore';\nimport { getAdminApp } from '../api/routes/auth/admin.js'; // Use async getAdminApp\nimport admin from 'firebase-admin'; // Import admin to access default app\n\nlet dbInstance = null;\n\nasync function getDb() {\n  if (dbInstance) {\n    return dbInstance;\n  }\n\n  if (process.env.NODE_ENV === 'test') {\n    console.log('[DBService Test Env] Attempting to get Firestore instance from default app for testing.');\n    try {\n      // Assume the test environment (e.g., jest.emulator.setup.js or test file's beforeAll)\n      // has initialized the default Firebase app.\n      dbInstance = admin.firestore(); // Directly use admin.firestore() which relies on the default app\n      console.log(`[DBService Test Env] Successfully obtained Firestore from default app via admin.firestore() for testing.`);\n    } catch (e) {\n      console.error(`[DBService Test Env] CRITICAL ERROR: Could not get Firestore using admin.firestore(). Is default app initialized? Error: ${e.message}.`);\n      throw e; // Re-throw the error, as this is critical for tests.\n    }\n  } else {\n    console.log('[DBService Prod Env] Using Firestore from adminApp.');\n    const adminApp = await getAdminApp();\n    dbInstance = getFirestore(adminApp);\n  }\n  return dbInstance;\n}\n\n/**\n * Retrieves deals that are in 'IN_FINAL_APPROVAL' state and past their finalApprovalDeadlineBackend.\n * @returns {Promise<Array<Object>>} A list of deal objects.\n */\nexport async function getDealsPastFinalApproval() {\n  const now = Timestamp.now();\n  try {\n    const db = await getDb();\n    const snapshot = await db.collection('deals')\n      .where('status', '==', 'IN_FINAL_APPROVAL')\n      .where('finalApprovalDeadlineBackend', '<=', now)\n      .get();\n\n    if (snapshot.empty) {\n      return [];\n    }\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n  } catch (error) {\n    console.error('[DBService] Error fetching deals past final approval:', error);\n    return [];\n  }\n}\n\n/**\n * Retrieves deals that are in 'IN_DISPUTE' state and past their disputeResolutionDeadlineBackend.\n * @returns {Promise<Array<Object>>} A list of deal objects.\n */\nexport async function getDealsPastDisputeDeadline() {\n  const now = Timestamp.now();\n  try {\n    const db = await getDb();\n    const snapshot = await db.collection('deals')\n      .where('status', '==', 'IN_DISPUTE')\n      .where('disputeResolutionDeadlineBackend', '<=', now)\n      .get();\n\n    if (snapshot.empty) {\n      return [];\n    }\n    return snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));\n  } catch (error) {\n    console.error('[DBService] Error fetching deals past dispute deadline:', error);\n    return [];\n  }\n}\n\n/**\n * Updates the status of a deal in Firestore and adds a timeline event.\n * @param {string} dealId The ID of the deal to update.\n * @param {object} updateData An object containing the new status and other fields to update.\n *                            Expected fields: status, timelineEventMessage.\n *                            Optional: autoReleaseTxHash, autoCancelTxHash, processingError, lastAutomaticProcessAttempt.\n */\nexport async function updateDealStatusInDB(dealId, updateData) {\n  if (!dealId || !updateData || !updateData.status || !updateData.timelineEventMessage) {\n    console.error(\"[DBService] Invalid parameters for updateDealStatusInDB:\", { dealId, updateData });\n    return;\n  }\n  try {\n    const db = await getDb();\n    const dealRef = db.collection('deals').doc(dealId);\n    \n    const timelineEvent = {\n      event: updateData.timelineEventMessage,\n      timestamp: Timestamp.now(),\n      systemTriggered: true, // Indicate this was an automated backend action\n    };\n\n    if (updateData.autoReleaseTxHash) {\n      timelineEvent.transactionHash = updateData.autoReleaseTxHash;\n    }\n    if (updateData.autoCancelTxHash) {\n      timelineEvent.transactionHash = updateData.autoCancelTxHash;\n    }\n\n    const firestoreUpdateData = {\n      status: updateData.status,\n      updatedAt: Timestamp.now(),\n      timeline: FieldValue.arrayUnion(timelineEvent),\n    };\n\n    if (updateData.autoReleaseTxHash) firestoreUpdateData.autoReleaseTxHash = updateData.autoReleaseTxHash;\n    if (updateData.autoCancelTxHash) firestoreUpdateData.autoCancelTxHash = updateData.autoCancelTxHash;\n    if (updateData.processingError) firestoreUpdateData.processingError = updateData.processingError;\n    if (updateData.lastAutomaticProcessAttempt) firestoreUpdateData.lastAutomaticProcessAttempt = updateData.lastAutomaticProcessAttempt;\n\n\n    await dealRef.update(firestoreUpdateData);\n    console.log(`[DBService] Deal ${dealId} status updated to ${updateData.status}. Event: \"${updateData.timelineEventMessage}\"`);\n  } catch (error) {\n    console.error(`[DBService] Error updating status for deal ${dealId} to ${updateData.status}:`, error);\n    // Consider more robust error handling or logging to a dedicated error service\n  }\n}\n\n/**\n * Retrieves a specific deal by its ID.\n * @param {string} dealId The ID of the deal to retrieve.\n * @returns {Promise<Object|null>} The deal object or null if not found.\n */\nexport async function getDealById(dealId) {\n  if (!dealId) {\n    console.error(\"[DBService] getDealById called with no dealId.\");\n    return null;\n  }\n  try {\n    const db = await getDb();\n    const docRef = db.collection('deals').doc(dealId);\n    const docSnap = await docRef.get();\n    if (docSnap.exists) {\n      return { id: docSnap.id, ...docSnap.data() };\n    } else {\n      console.log(`[DBService] No deal found with ID: ${dealId}`);\n      return null;\n    }\n  } catch (error) {\n    console.error(`[DBService] Error fetching deal by ID ${dealId}:`, error);\n    return null;\n  }\n}\n"],"mappings":"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","ignoreList":[]}