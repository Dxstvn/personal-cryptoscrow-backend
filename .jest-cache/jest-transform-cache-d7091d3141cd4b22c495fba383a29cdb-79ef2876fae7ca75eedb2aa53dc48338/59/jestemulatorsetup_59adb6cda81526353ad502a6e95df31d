6f4d97048876c207e51b39dbe046ccde
import { initializeApp } from 'firebase/app';
import { getAuth, connectAuthEmulator } from 'firebase/auth';
import { initializeApp as initializeAdminApp } from 'firebase-admin/app';
import { getAuth as getAdminAuth } from 'firebase-admin/auth';
import { getFirestore as getAdminFirestore } from 'firebase-admin/firestore';

// Common project ID for both client and admin SDKs
const PROJECT_ID = "demo-test";

// Firebase configuration for emulator - API key can be anything when using emulator
const firebaseConfig = {
  apiKey: "demo-api-key",
  authDomain: "localhost",
  projectId: PROJECT_ID,
  storageBucket: `${PROJECT_ID}.appspot.com`,
  messagingSenderId: "123456789",
  appId: "1:123456789:web:abcdef"
};

// Initialize Firebase app
const app = initializeApp(firebaseConfig, "testApp");

// Initialize Firebase Admin app with the same project ID
// For testing, we don't need credentials
const adminApp = initializeAdminApp({
  projectId: PROJECT_ID,
  storageBucket: `${PROJECT_ID}.appspot.com`
}, "adminTestApp");

// Connect client SDK to auth emulator
const auth = getAuth(app);
connectAuthEmulator(auth, "http://localhost:9099", {
  disableWarnings: false
});

// Get Admin Auth instance - now safe to call after admin app initialization
const adminAuth = getAdminAuth(adminApp);
const adminFirestore = getAdminFirestore(adminApp);
adminFirestore.settings({
  host: 'localhost:5004',
  ssl: false
});
const FIREBASE_AUTH_EMULATOR_HOST = "localhost:9099";
const FIRESTORE_EMULATOR_HOST = "localhost:5004";
const FIREBASE_STORAGE_EMULATOR_HOST = "localhost:9199";
// Log environment for debugging
console.log(`Auth Emulator Host: ${FIREBASE_AUTH_EMULATOR_HOST}`);
console.log(`Firestore Emulator Host: ${FIRESTORE_EMULATOR_HOST}`);
console.log(`Storage Emulator Host: ${FIREBASE_STORAGE_EMULATOR_HOST}`);
console.log(`Test Project ID: ${PROJECT_ID}`);

// Export initialized services
export { auth, adminAuth, adminFirestore, PROJECT_ID, adminApp };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbml0aWFsaXplQXBwIiwiZ2V0QXV0aCIsImNvbm5lY3RBdXRoRW11bGF0b3IiLCJpbml0aWFsaXplQWRtaW5BcHAiLCJnZXRBZG1pbkF1dGgiLCJnZXRGaXJlc3RvcmUiLCJnZXRBZG1pbkZpcmVzdG9yZSIsIlBST0pFQ1RfSUQiLCJmaXJlYmFzZUNvbmZpZyIsImFwaUtleSIsImF1dGhEb21haW4iLCJwcm9qZWN0SWQiLCJzdG9yYWdlQnVja2V0IiwibWVzc2FnaW5nU2VuZGVySWQiLCJhcHBJZCIsImFwcCIsImFkbWluQXBwIiwiYXV0aCIsImRpc2FibGVXYXJuaW5ncyIsImFkbWluQXV0aCIsImFkbWluRmlyZXN0b3JlIiwic2V0dGluZ3MiLCJob3N0Iiwic3NsIiwiRklSRUJBU0VfQVVUSF9FTVVMQVRPUl9IT1NUIiwiRklSRVNUT1JFX0VNVUxBVE9SX0hPU1QiLCJGSVJFQkFTRV9TVE9SQUdFX0VNVUxBVE9SX0hPU1QiLCJjb25zb2xlIiwibG9nIl0sInNvdXJjZXMiOlsiamVzdC5lbXVsYXRvci5zZXR1cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbml0aWFsaXplQXBwIH0gZnJvbSAnZmlyZWJhc2UvYXBwJztcbmltcG9ydCB7IGdldEF1dGgsIGNvbm5lY3RBdXRoRW11bGF0b3IgfSBmcm9tICdmaXJlYmFzZS9hdXRoJztcbmltcG9ydCB7IGluaXRpYWxpemVBcHAgYXMgaW5pdGlhbGl6ZUFkbWluQXBwIH0gZnJvbSAnZmlyZWJhc2UtYWRtaW4vYXBwJztcbmltcG9ydCB7IGdldEF1dGggYXMgZ2V0QWRtaW5BdXRoIH0gZnJvbSAnZmlyZWJhc2UtYWRtaW4vYXV0aCc7XG5pbXBvcnQgeyBnZXRGaXJlc3RvcmUgYXMgZ2V0QWRtaW5GaXJlc3RvcmUgfSBmcm9tICdmaXJlYmFzZS1hZG1pbi9maXJlc3RvcmUnO1xuXG4vLyBDb21tb24gcHJvamVjdCBJRCBmb3IgYm90aCBjbGllbnQgYW5kIGFkbWluIFNES3NcbmNvbnN0IFBST0pFQ1RfSUQgPSBcImRlbW8tdGVzdFwiO1xuXG4vLyBGaXJlYmFzZSBjb25maWd1cmF0aW9uIGZvciBlbXVsYXRvciAtIEFQSSBrZXkgY2FuIGJlIGFueXRoaW5nIHdoZW4gdXNpbmcgZW11bGF0b3JcbmNvbnN0IGZpcmViYXNlQ29uZmlnID0ge1xuICBhcGlLZXk6IFwiZGVtby1hcGkta2V5XCIsXG4gIGF1dGhEb21haW46IFwibG9jYWxob3N0XCIsXG4gIHByb2plY3RJZDogUFJPSkVDVF9JRCxcbiAgc3RvcmFnZUJ1Y2tldDogYCR7UFJPSkVDVF9JRH0uYXBwc3BvdC5jb21gLFxuICBtZXNzYWdpbmdTZW5kZXJJZDogXCIxMjM0NTY3ODlcIixcbiAgYXBwSWQ6IFwiMToxMjM0NTY3ODk6d2ViOmFiY2RlZlwiXG59O1xuXG4vLyBJbml0aWFsaXplIEZpcmViYXNlIGFwcFxuY29uc3QgYXBwID0gaW5pdGlhbGl6ZUFwcChmaXJlYmFzZUNvbmZpZywgXCJ0ZXN0QXBwXCIpO1xuXG4vLyBJbml0aWFsaXplIEZpcmViYXNlIEFkbWluIGFwcCB3aXRoIHRoZSBzYW1lIHByb2plY3QgSURcbi8vIEZvciB0ZXN0aW5nLCB3ZSBkb24ndCBuZWVkIGNyZWRlbnRpYWxzXG5jb25zdCBhZG1pbkFwcCA9IGluaXRpYWxpemVBZG1pbkFwcCh7XG4gIHByb2plY3RJZDogUFJPSkVDVF9JRCxcbiAgc3RvcmFnZUJ1Y2tldDogYCR7UFJPSkVDVF9JRH0uYXBwc3BvdC5jb21gXG59LCBcImFkbWluVGVzdEFwcFwiKTtcblxuLy8gQ29ubmVjdCBjbGllbnQgU0RLIHRvIGF1dGggZW11bGF0b3JcbmNvbnN0IGF1dGggPSBnZXRBdXRoKGFwcCk7XG5jb25uZWN0QXV0aEVtdWxhdG9yKGF1dGgsIFwiaHR0cDovL2xvY2FsaG9zdDo5MDk5XCIsIHsgZGlzYWJsZVdhcm5pbmdzOiBmYWxzZSB9KTtcblxuLy8gR2V0IEFkbWluIEF1dGggaW5zdGFuY2UgLSBub3cgc2FmZSB0byBjYWxsIGFmdGVyIGFkbWluIGFwcCBpbml0aWFsaXphdGlvblxuY29uc3QgYWRtaW5BdXRoID0gZ2V0QWRtaW5BdXRoKGFkbWluQXBwKTtcbmNvbnN0IGFkbWluRmlyZXN0b3JlID0gZ2V0QWRtaW5GaXJlc3RvcmUoYWRtaW5BcHApO1xuYWRtaW5GaXJlc3RvcmUuc2V0dGluZ3Moe1xuICBob3N0OiAnbG9jYWxob3N0OjUwMDQnLFxuICBzc2w6IGZhbHNlLFxufSk7XG5jb25zdCBGSVJFQkFTRV9BVVRIX0VNVUxBVE9SX0hPU1Q9XCJsb2NhbGhvc3Q6OTA5OVwiXG5jb25zdCBGSVJFU1RPUkVfRU1VTEFUT1JfSE9TVD1cImxvY2FsaG9zdDo1MDA0XCJcbmNvbnN0IEZJUkVCQVNFX1NUT1JBR0VfRU1VTEFUT1JfSE9TVD1cImxvY2FsaG9zdDo5MTk5XCJcbi8vIExvZyBlbnZpcm9ubWVudCBmb3IgZGVidWdnaW5nXG5jb25zb2xlLmxvZyhgQXV0aCBFbXVsYXRvciBIb3N0OiAke0ZJUkVCQVNFX0FVVEhfRU1VTEFUT1JfSE9TVH1gKTtcbmNvbnNvbGUubG9nKGBGaXJlc3RvcmUgRW11bGF0b3IgSG9zdDogJHtGSVJFU1RPUkVfRU1VTEFUT1JfSE9TVH1gKTtcbmNvbnNvbGUubG9nKGBTdG9yYWdlIEVtdWxhdG9yIEhvc3Q6ICR7RklSRUJBU0VfU1RPUkFHRV9FTVVMQVRPUl9IT1NUfWApO1xuY29uc29sZS5sb2coYFRlc3QgUHJvamVjdCBJRDogJHtQUk9KRUNUX0lEfWApO1xuXG5cbi8vIEV4cG9ydCBpbml0aWFsaXplZCBzZXJ2aWNlc1xuZXhwb3J0IHtcbiAgYXV0aCxcbiAgYWRtaW5BdXRoLFxuICBhZG1pbkZpcmVzdG9yZSxcbiAgUFJPSkVDVF9JRCxcbiAgYWRtaW5BcHBcbn07Il0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxhQUFhLFFBQVEsY0FBYztBQUM1QyxTQUFTQyxPQUFPLEVBQUVDLG1CQUFtQixRQUFRLGVBQWU7QUFDNUQsU0FBU0YsYUFBYSxJQUFJRyxrQkFBa0IsUUFBUSxvQkFBb0I7QUFDeEUsU0FBU0YsT0FBTyxJQUFJRyxZQUFZLFFBQVEscUJBQXFCO0FBQzdELFNBQVNDLFlBQVksSUFBSUMsaUJBQWlCLFFBQVEsMEJBQTBCOztBQUU1RTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxXQUFXOztBQUU5QjtBQUNBLE1BQU1DLGNBQWMsR0FBRztFQUNyQkMsTUFBTSxFQUFFLGNBQWM7RUFDdEJDLFVBQVUsRUFBRSxXQUFXO0VBQ3ZCQyxTQUFTLEVBQUVKLFVBQVU7RUFDckJLLGFBQWEsRUFBRSxHQUFHTCxVQUFVLGNBQWM7RUFDMUNNLGlCQUFpQixFQUFFLFdBQVc7RUFDOUJDLEtBQUssRUFBRTtBQUNULENBQUM7O0FBRUQ7QUFDQSxNQUFNQyxHQUFHLEdBQUdmLGFBQWEsQ0FBQ1EsY0FBYyxFQUFFLFNBQVMsQ0FBQzs7QUFFcEQ7QUFDQTtBQUNBLE1BQU1RLFFBQVEsR0FBR2Isa0JBQWtCLENBQUM7RUFDbENRLFNBQVMsRUFBRUosVUFBVTtFQUNyQkssYUFBYSxFQUFFLEdBQUdMLFVBQVU7QUFDOUIsQ0FBQyxFQUFFLGNBQWMsQ0FBQzs7QUFFbEI7QUFDQSxNQUFNVSxJQUFJLEdBQUdoQixPQUFPLENBQUNjLEdBQUcsQ0FBQztBQUN6QmIsbUJBQW1CLENBQUNlLElBQUksRUFBRSx1QkFBdUIsRUFBRTtFQUFFQyxlQUFlLEVBQUU7QUFBTSxDQUFDLENBQUM7O0FBRTlFO0FBQ0EsTUFBTUMsU0FBUyxHQUFHZixZQUFZLENBQUNZLFFBQVEsQ0FBQztBQUN4QyxNQUFNSSxjQUFjLEdBQUdkLGlCQUFpQixDQUFDVSxRQUFRLENBQUM7QUFDbERJLGNBQWMsQ0FBQ0MsUUFBUSxDQUFDO0VBQ3RCQyxJQUFJLEVBQUUsZ0JBQWdCO0VBQ3RCQyxHQUFHLEVBQUU7QUFDUCxDQUFDLENBQUM7QUFDRixNQUFNQywyQkFBMkIsR0FBQyxnQkFBZ0I7QUFDbEQsTUFBTUMsdUJBQXVCLEdBQUMsZ0JBQWdCO0FBQzlDLE1BQU1DLDhCQUE4QixHQUFDLGdCQUFnQjtBQUNyRDtBQUNBQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyx1QkFBdUJKLDJCQUEyQixFQUFFLENBQUM7QUFDakVHLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLDRCQUE0QkgsdUJBQXVCLEVBQUUsQ0FBQztBQUNsRUUsT0FBTyxDQUFDQyxHQUFHLENBQUMsMEJBQTBCRiw4QkFBOEIsRUFBRSxDQUFDO0FBQ3ZFQyxPQUFPLENBQUNDLEdBQUcsQ0FBQyxvQkFBb0JyQixVQUFVLEVBQUUsQ0FBQzs7QUFHN0M7QUFDQSxTQUNFVSxJQUFJLEVBQ0pFLFNBQVMsRUFDVEMsY0FBYyxFQUNkYixVQUFVLEVBQ1ZTLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0=