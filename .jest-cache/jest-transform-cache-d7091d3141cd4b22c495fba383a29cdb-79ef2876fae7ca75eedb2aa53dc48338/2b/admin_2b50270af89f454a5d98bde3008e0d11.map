{"version":3,"names":["isTest","process","env","NODE_ENV","isProduction","FIRESTORE_EMULATOR_HOST","FIREBASE_AUTH_EMULATOR_HOST","FIREBASE_STORAGE_EMULATOR_HOST","FIREBASE_PROJECT_ID","FIREBASE_STORAGE_BUCKET","console","log","initializeApp","cert","getApp","getApps","deleteApp","getAuth","fs","awsSecretsManager","appName","initializeAdmin","find","app","name","options","projectId","storageBucket","USE_AWS_SECRETS","firebaseServiceAccount","getFirebaseServiceAccount","project_id","private_key","client_email","Error","credential","secretsManagerError","warn","message","GOOGLE_APPLICATION_CREDENTIALS","existsSync","serviceAccount","JSON","parse","readFileSync","fallbackError","error","serviceAccountPath","e","adminAppPromise","getAdminApp","adminApp","deleteAdminApp","appToDelete","includes"],"sources":["admin.js"],"sourcesContent":["import '../../../config/env.js';\n\n// Set emulator configuration BEFORE any Firebase imports\nconst isTest = process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'e2e_test';\nconst isProduction = process.env.NODE_ENV === 'production';\n\nif (isTest) {\n  // Ensure Admin SDK uses emulators - set environment variables BEFORE any Firebase imports\n  process.env.FIRESTORE_EMULATOR_HOST = process.env.FIRESTORE_EMULATOR_HOST || 'localhost:5004';\n  process.env.FIREBASE_AUTH_EMULATOR_HOST = process.env.FIREBASE_AUTH_EMULATOR_HOST || 'localhost:9099';\n  process.env.FIREBASE_STORAGE_EMULATOR_HOST = process.env.FIREBASE_STORAGE_EMULATOR_HOST || 'localhost:9199';\n  \n  // For test mode, ensure we have consistent project configuration\n  process.env.FIREBASE_PROJECT_ID = process.env.FIREBASE_PROJECT_ID || 'demo-test';\n  process.env.FIREBASE_STORAGE_BUCKET = process.env.FIREBASE_STORAGE_BUCKET || 'demo-test.appspot.com';\n  \n  console.log(`ðŸ§ª Admin SDK connecting to emulators - Auth: ${process.env.FIREBASE_AUTH_EMULATOR_HOST}, Firestore: ${process.env.FIRESTORE_EMULATOR_HOST}, Storage: ${process.env.FIREBASE_STORAGE_EMULATOR_HOST}`);\n}\n\nimport { initializeApp, cert, getApp, getApps, deleteApp } from 'firebase-admin/app';\nimport { getAuth } from 'firebase-admin/auth';\nimport fs from 'fs';\nimport awsSecretsManager from '../../../config/awsSecretsManager.js';\n\nconst appName = \"adminApp\";\n\n// Function to initialize or get the admin app\nasync function initializeAdmin() {\n  console.log(`Initializing Admin SDK. NODE_ENV='${process.env.NODE_ENV}', isTest=${isTest}, isProduction=${isProduction}`);\n\n  if (getApps().find(app => app.name === appName)) {\n    console.log(`Admin app \"${appName}\" already exists. Returning existing instance.`);\n    return getApp(appName);\n  }\n\n  let options;\n\n  if (isTest) {\n    console.log(\"Using Test configuration for Admin SDK with emulators.\");\n    options = {\n      projectId: \"demo-test\",\n      storageBucket: \"demo-test.appspot.com\"\n    };\n    console.log(`ðŸ§ª Admin SDK will use project: ${options.projectId}, storage: ${options.storageBucket}`);\n  } else if (isProduction && process.env.USE_AWS_SECRETS === 'true') {\n    console.log(\"Using Production configuration for Admin SDK with AWS Secrets Manager.\");\n    \n    // In production with AWS Secrets Manager, try to get Firebase service account\n    try {\n      const firebaseServiceAccount = await awsSecretsManager.getFirebaseServiceAccount();\n      \n      if (!firebaseServiceAccount || !firebaseServiceAccount.project_id || !firebaseServiceAccount.private_key || !firebaseServiceAccount.client_email) {\n        throw new Error('Firebase service account is missing required fields from AWS Secrets Manager');\n      }\n      \n      options = {\n        credential: cert(firebaseServiceAccount),\n        projectId: firebaseServiceAccount.project_id,\n        storageBucket: process.env.FIREBASE_STORAGE_BUCKET || firebaseServiceAccount.project_id + '.appspot.com'\n      };\n      console.log(\"Firebase Admin SDK initialized with service account from AWS Secrets Manager.\");\n    } catch (secretsManagerError) {\n      console.warn(`Failed to get Firebase service account from AWS Secrets Manager: ${secretsManagerError.message}`);\n      console.log(\"Attempting fallback to environment variables for Firebase configuration...\");\n      \n      // Fallback to environment variables\n      try {\n        if (!process.env.FIREBASE_PROJECT_ID) {\n          throw new Error('FIREBASE_PROJECT_ID environment variable is required when Firebase service account is not in AWS Secrets Manager');\n        }\n        \n        // Use Application Default Credentials or environment-based initialization\n        options = {\n          projectId: process.env.FIREBASE_PROJECT_ID,\n          storageBucket: process.env.FIREBASE_STORAGE_BUCKET || process.env.FIREBASE_PROJECT_ID + '.appspot.com'\n        };\n        \n        // If we have a service account file path, use it\n        if (process.env.GOOGLE_APPLICATION_CREDENTIALS && fs.existsSync(process.env.GOOGLE_APPLICATION_CREDENTIALS)) {\n          console.log(\"Using GOOGLE_APPLICATION_CREDENTIALS file for Firebase authentication.\");\n          const serviceAccount = JSON.parse(fs.readFileSync(process.env.GOOGLE_APPLICATION_CREDENTIALS, 'utf8'));\n          options.credential = cert(serviceAccount);\n        } else {\n          console.log(\"Using Application Default Credentials for Firebase authentication.\");\n          // Firebase Admin SDK will automatically use Application Default Credentials\n          // This works in environments like Google Cloud Run, App Engine, etc.\n        }\n        \n        console.log(\"Firebase Admin SDK initialized with environment variables fallback.\");\n      } catch (fallbackError) {\n        console.error(\"Fallback to environment variables also failed:\", fallbackError.message);\n        throw new Error(`Failed to initialize Firebase Admin SDK with AWS Secrets Manager: ${secretsManagerError.message}. Fallback to environment variables also failed: ${fallbackError.message}. Please ensure either the Firebase service account is properly configured in AWS Secrets Manager, or FIREBASE_PROJECT_ID and GOOGLE_APPLICATION_CREDENTIALS are set.`);\n      }\n    }\n  } else {\n    console.log(\"Using Development configuration for Admin SDK with local service account file.\");\n    const serviceAccountPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;\n    if (!serviceAccountPath) {\n      throw new Error(\"GOOGLE_APPLICATION_CREDENTIALS environment variable is not set.\");\n    }\n    \n    try {\n      const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf8'));\n      options = {\n        credential: cert(serviceAccount),\n        projectId: serviceAccount.project_id,\n        storageBucket: process.env.FIREBASE_STORAGE_BUCKET\n      };\n    } catch (e) {\n      throw new Error(`Failed to load or parse Service Account Key: ${e.message}`);\n    }\n  }\n\n  console.log(`Initializing admin app \"${appName}\" with project ID:`, options.projectId);\n  const app = initializeApp(options, appName);\n  \n  // Log emulator connection status in test mode\n  if (isTest) {\n    console.log(`âœ… Admin app \"${appName}\" initialized for testing with emulators`);\n  }\n  \n  return app;\n}\n\n// Lazy initialization cache\nlet adminAppPromise = null;\n\n// Async function to get admin app\nasync function getAdminApp() {\n  if (!adminAppPromise) {\n    adminAppPromise = initializeAdmin();\n  }\n  return await adminAppPromise;\n}\n\n// For backward compatibility, export a synchronous version for non-production environments\nlet adminApp;\nif (isTest || (!isProduction || process.env.USE_AWS_SECRETS !== 'true')) {\n  // For test or development environments, initialize synchronously using the old approach\n  console.log(\"Using synchronous initialization for development/test environment.\");\n  try {\n    // Use the synchronous version for development\n    if (isTest) {\n      adminApp = initializeApp({\n        projectId: \"demo-test\",\n        storageBucket: \"demo-test.appspot.com\"\n      }, appName);\n      console.log(`ðŸ§ª Synchronous admin app initialized for testing with project: demo-test`);\n    } else {\n      const serviceAccountPath = process.env.GOOGLE_APPLICATION_CREDENTIALS;\n      if (serviceAccountPath && fs.existsSync(serviceAccountPath)) {\n        const serviceAccount = JSON.parse(fs.readFileSync(serviceAccountPath, 'utf8'));\n        adminApp = initializeApp({\n          credential: cert(serviceAccount),\n          projectId: serviceAccount.project_id,\n          storageBucket: process.env.FIREBASE_STORAGE_BUCKET\n        }, appName);\n      } else {\n        console.warn(\"GOOGLE_APPLICATION_CREDENTIALS not found. Will initialize when first accessed.\");\n      }\n    }\n  } catch (error) {\n    console.warn('Warning: Synchronous admin app initialization failed:', error.message);\n    console.log('Admin app will be initialized asynchronously when first accessed.');\n  }\n} else {\n  console.log(\"Production mode detected. Admin app will be initialized asynchronously when first accessed.\");\n}\n\nexport { adminApp, getAdminApp };\n\n// Optional: Function to clean up the admin app\nexport async function deleteAdminApp() {\n    try {\n        const appToDelete = getApp(appName);\n        await deleteApp(appToDelete);\n        console.log(`Admin app \"${appName}\" deleted.`);\n        // Reset the promise cache\n        adminAppPromise = null;\n    } catch (error) {\n        if (!error.message.includes(\"No Firebase App\") && !error.message.includes(\"already deleted\")) {\n            console.warn(`Could not delete admin app \"${appName}\": ${error.message}`);\n        }\n    }\n}"],"mappings":"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","ignoreList":[]}