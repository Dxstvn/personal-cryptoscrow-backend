9f0cc8040d298ce13cf45765a5edd851
import { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';
class AWSSecretsManager {
  constructor() {
    this.client = new SecretsManagerClient({
      region: process.env.AWS_REGION || 'us-east-1'
    });
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes cache
  }
  async getSecret(secretName) {
    // Check cache first
    const cached = this.cache.get(secretName);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
    try {
      const command = new GetSecretValueCommand({
        SecretId: secretName
      });
      const response = await this.client.send(command);
      const secretValue = JSON.parse(response.SecretString);

      // Cache the result
      this.cache.set(secretName, {
        data: secretValue,
        timestamp: Date.now()
      });
      return secretValue;
    } catch (error) {
      console.error(`Failed to retrieve secret ${secretName}:`, error.message);
      throw new Error(`AWS Secrets Manager error: ${error.message}`);
    }
  }
  async getAppSecrets() {
    const environment = process.env.NODE_ENV || 'development';
    const secretName = environment === 'staging' ? 'CryptoEscrow/Staging/App/Config' : 'CryptoEscrow/App/Config';
    return await this.getSecret(secretName);
  }
  async getBlockchainSecrets() {
    const environment = process.env.NODE_ENV || 'development';
    const secretName = environment === 'staging' ? 'CryptoEscrow/Staging/Blockchain/Keys' : 'CryptoEscrow/Blockchain/Keys';
    return await this.getSecret(secretName);
  }
  async getFirebaseServiceAccount() {
    const serviceAccount = await this.getSecret('CryptoEscrow/Firebase/ServiceAccount');

    // Fix the private key formatting - unescape the newlines
    if (serviceAccount && serviceAccount.private_key) {
      serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, '\n');
    }
    return serviceAccount;
  }

  // Method to clear cache (useful for testing or forced refresh)
  clearCache() {
    this.cache.clear();
  }

  // Method to check if running in AWS environment
  isAWSEnvironment() {
    return process.env.NODE_ENV === 'production' || process.env.NODE_ENV === 'staging' || process.env.USE_AWS_SECRETS === 'true';
  }
}
export default new AWSSecretsManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZWNyZXRzTWFuYWdlckNsaWVudCIsIkdldFNlY3JldFZhbHVlQ29tbWFuZCIsIkFXU1NlY3JldHNNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJyZWdpb24iLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsImNhY2hlIiwiTWFwIiwiY2FjaGVUaW1lb3V0IiwiZ2V0U2VjcmV0Iiwic2VjcmV0TmFtZSIsImNhY2hlZCIsImdldCIsIkRhdGUiLCJub3ciLCJ0aW1lc3RhbXAiLCJkYXRhIiwiY29tbWFuZCIsIlNlY3JldElkIiwicmVzcG9uc2UiLCJzZW5kIiwic2VjcmV0VmFsdWUiLCJKU09OIiwicGFyc2UiLCJTZWNyZXRTdHJpbmciLCJzZXQiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiRXJyb3IiLCJnZXRBcHBTZWNyZXRzIiwiZW52aXJvbm1lbnQiLCJOT0RFX0VOViIsImdldEJsb2NrY2hhaW5TZWNyZXRzIiwiZ2V0RmlyZWJhc2VTZXJ2aWNlQWNjb3VudCIsInNlcnZpY2VBY2NvdW50IiwicHJpdmF0ZV9rZXkiLCJyZXBsYWNlIiwiY2xlYXJDYWNoZSIsImNsZWFyIiwiaXNBV1NFbnZpcm9ubWVudCIsIlVTRV9BV1NfU0VDUkVUUyJdLCJzb3VyY2VzIjpbImF3c1NlY3JldHNNYW5hZ2VyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFNlY3JldHNNYW5hZ2VyQ2xpZW50LCBHZXRTZWNyZXRWYWx1ZUNvbW1hbmQgfSBmcm9tICdAYXdzLXNkay9jbGllbnQtc2VjcmV0cy1tYW5hZ2VyJztcblxuY2xhc3MgQVdTU2VjcmV0c01hbmFnZXIge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNsaWVudCA9IG5ldyBTZWNyZXRzTWFuYWdlckNsaWVudCh7XG4gICAgICByZWdpb246IHByb2Nlc3MuZW52LkFXU19SRUdJT04gfHwgJ3VzLWVhc3QtMSdcbiAgICB9KTtcbiAgICB0aGlzLmNhY2hlID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuY2FjaGVUaW1lb3V0ID0gNSAqIDYwICogMTAwMDsgLy8gNSBtaW51dGVzIGNhY2hlXG4gIH1cblxuICBhc3luYyBnZXRTZWNyZXQoc2VjcmV0TmFtZSkge1xuICAgIC8vIENoZWNrIGNhY2hlIGZpcnN0XG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5jYWNoZS5nZXQoc2VjcmV0TmFtZSk7XG4gICAgaWYgKGNhY2hlZCAmJiBEYXRlLm5vdygpIC0gY2FjaGVkLnRpbWVzdGFtcCA8IHRoaXMuY2FjaGVUaW1lb3V0KSB7XG4gICAgICByZXR1cm4gY2FjaGVkLmRhdGE7XG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGNvbW1hbmQgPSBuZXcgR2V0U2VjcmV0VmFsdWVDb21tYW5kKHtcbiAgICAgICAgU2VjcmV0SWQ6IHNlY3JldE5hbWUsXG4gICAgICB9KTtcblxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLmNsaWVudC5zZW5kKGNvbW1hbmQpO1xuICAgICAgY29uc3Qgc2VjcmV0VmFsdWUgPSBKU09OLnBhcnNlKHJlc3BvbnNlLlNlY3JldFN0cmluZyk7XG5cbiAgICAgIC8vIENhY2hlIHRoZSByZXN1bHRcbiAgICAgIHRoaXMuY2FjaGUuc2V0KHNlY3JldE5hbWUsIHtcbiAgICAgICAgZGF0YTogc2VjcmV0VmFsdWUsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzZWNyZXRWYWx1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihgRmFpbGVkIHRvIHJldHJpZXZlIHNlY3JldCAke3NlY3JldE5hbWV9OmAsIGVycm9yLm1lc3NhZ2UpO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBBV1MgU2VjcmV0cyBNYW5hZ2VyIGVycm9yOiAke2Vycm9yLm1lc3NhZ2V9YCk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0QXBwU2VjcmV0cygpIHtcbiAgICBjb25zdCBlbnZpcm9ubWVudCA9IHByb2Nlc3MuZW52Lk5PREVfRU5WIHx8ICdkZXZlbG9wbWVudCc7XG4gICAgY29uc3Qgc2VjcmV0TmFtZSA9IGVudmlyb25tZW50ID09PSAnc3RhZ2luZycgXG4gICAgICA/ICdDcnlwdG9Fc2Nyb3cvU3RhZ2luZy9BcHAvQ29uZmlnJ1xuICAgICAgOiAnQ3J5cHRvRXNjcm93L0FwcC9Db25maWcnO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFNlY3JldChzZWNyZXROYW1lKTtcbiAgfVxuXG4gIGFzeW5jIGdldEJsb2NrY2hhaW5TZWNyZXRzKCkge1xuICAgIGNvbnN0IGVudmlyb25tZW50ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JztcbiAgICBjb25zdCBzZWNyZXROYW1lID0gZW52aXJvbm1lbnQgPT09ICdzdGFnaW5nJyBcbiAgICAgID8gJ0NyeXB0b0VzY3Jvdy9TdGFnaW5nL0Jsb2NrY2hhaW4vS2V5cydcbiAgICAgIDogJ0NyeXB0b0VzY3Jvdy9CbG9ja2NoYWluL0tleXMnO1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmdldFNlY3JldChzZWNyZXROYW1lKTtcbiAgfVxuXG4gIGFzeW5jIGdldEZpcmViYXNlU2VydmljZUFjY291bnQoKSB7XG4gICAgY29uc3Qgc2VydmljZUFjY291bnQgPSBhd2FpdCB0aGlzLmdldFNlY3JldCgnQ3J5cHRvRXNjcm93L0ZpcmViYXNlL1NlcnZpY2VBY2NvdW50Jyk7XG4gICAgXG4gICAgLy8gRml4IHRoZSBwcml2YXRlIGtleSBmb3JtYXR0aW5nIC0gdW5lc2NhcGUgdGhlIG5ld2xpbmVzXG4gICAgaWYgKHNlcnZpY2VBY2NvdW50ICYmIHNlcnZpY2VBY2NvdW50LnByaXZhdGVfa2V5KSB7XG4gICAgICBzZXJ2aWNlQWNjb3VudC5wcml2YXRlX2tleSA9IHNlcnZpY2VBY2NvdW50LnByaXZhdGVfa2V5LnJlcGxhY2UoL1xcXFxuL2csICdcXG4nKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIHNlcnZpY2VBY2NvdW50O1xuICB9XG5cbiAgLy8gTWV0aG9kIHRvIGNsZWFyIGNhY2hlICh1c2VmdWwgZm9yIHRlc3Rpbmcgb3IgZm9yY2VkIHJlZnJlc2gpXG4gIGNsZWFyQ2FjaGUoKSB7XG4gICAgdGhpcy5jYWNoZS5jbGVhcigpO1xuICB9XG5cbiAgLy8gTWV0aG9kIHRvIGNoZWNrIGlmIHJ1bm5pbmcgaW4gQVdTIGVudmlyb25tZW50XG4gIGlzQVdTRW52aXJvbm1lbnQoKSB7XG4gICAgcmV0dXJuIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgfHwgXG4gICAgICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAnc3RhZ2luZycgfHwgXG4gICAgICAgICAgIHByb2Nlc3MuZW52LlVTRV9BV1NfU0VDUkVUUyA9PT0gJ3RydWUnO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBBV1NTZWNyZXRzTWFuYWdlcigpOyAiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLG9CQUFvQixFQUFFQyxxQkFBcUIsUUFBUSxpQ0FBaUM7QUFFN0YsTUFBTUMsaUJBQWlCLENBQUM7RUFDdEJDLFdBQVdBLENBQUEsRUFBRztJQUNaLElBQUksQ0FBQ0MsTUFBTSxHQUFHLElBQUlKLG9CQUFvQixDQUFDO01BQ3JDSyxNQUFNLEVBQUVDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxVQUFVLElBQUk7SUFDcEMsQ0FBQyxDQUFDO0lBQ0YsSUFBSSxDQUFDQyxLQUFLLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQUM7SUFDdEIsSUFBSSxDQUFDQyxZQUFZLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztFQUNyQztFQUVBLE1BQU1DLFNBQVNBLENBQUNDLFVBQVUsRUFBRTtJQUMxQjtJQUNBLE1BQU1DLE1BQU0sR0FBRyxJQUFJLENBQUNMLEtBQUssQ0FBQ00sR0FBRyxDQUFDRixVQUFVLENBQUM7SUFDekMsSUFBSUMsTUFBTSxJQUFJRSxJQUFJLENBQUNDLEdBQUcsQ0FBQyxDQUFD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