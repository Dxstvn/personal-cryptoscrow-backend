8aaee754504d4c213b3b48e69a5900ab
import { SecretsManagerClient, GetSecretValueCommand } from '@aws-sdk/client-secrets-manager';
class AWSSecretsManager {
  constructor() {
    this.client = new SecretsManagerClient({
      region: process.env.AWS_REGION || 'us-east-1'
    });
    this.cache = new Map();
    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes cache
  }
  async getSecret(secretName) {
    // Check cache first
    const cached = this.cache.get(secretName);
    if (cached && Date.now() - cached.timestamp < this.cacheTimeout) {
      return cached.data;
    }
    try {
      const command = new GetSecretValueCommand({
        SecretId: secretName
      });
      const response = await this.client.send(command);
      const secretValue = JSON.parse(response.SecretString);

      // Cache the result
      this.cache.set(secretName, {
        data: secretValue,
        timestamp: Date.now()
      });
      return secretValue;
    } catch (error) {
      console.error(`Failed to retrieve secret ${secretName}:`, error.message);
      throw new Error(`AWS Secrets Manager error: ${error.message}`);
    }
  }
  async getAppSecrets() {
    return await this.getSecret('CryptoEscrow/App/Config');
  }
  async getBlockchainSecrets() {
    return await this.getSecret('CryptoEscrow/Blockchain/Keys');
  }
  async getFirebaseServiceAccount() {
    const serviceAccount = await this.getSecret('CryptoEscrow/Firebase/ServiceAccount');

    // Fix the private key formatting - unescape the newlines
    if (serviceAccount && serviceAccount.private_key) {
      serviceAccount.private_key = serviceAccount.private_key.replace(/\\n/g, '\n');
    }
    return serviceAccount;
  }

  // Method to clear cache (useful for testing or forced refresh)
  clearCache() {
    this.cache.clear();
  }

  // Method to check if running in AWS environment
  isAWSEnvironment() {
    return process.env.NODE_ENV === 'production' || process.env.USE_AWS_SECRETS === 'true';
  }
}
export default new AWSSecretsManager();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTZWNyZXRzTWFuYWdlckNsaWVudCIsIkdldFNlY3JldFZhbHVlQ29tbWFuZCIsIkFXU1NlY3JldHNNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJjbGllbnQiLCJyZWdpb24iLCJwcm9jZXNzIiwiZW52IiwiQVdTX1JFR0lPTiIsImNhY2hlIiwiTWFwIiwiY2FjaGVUaW1lb3V0IiwiZ2V0U2VjcmV0Iiwic2VjcmV0TmFtZSIsImNhY2hlZCIsImdldCIsIkRhdGUiLCJub3ciLCJ0aW1lc3RhbXAiLCJkYXRhIiwiY29tbWFuZCIsIlNlY3JldElkIiwicmVzcG9uc2UiLCJzZW5kIiwic2VjcmV0VmFsdWUiLCJKU09OIiwicGFyc2UiLCJTZWNyZXRTdHJpbmciLCJzZXQiLCJlcnJvciIsImNvbnNvbGUiLCJtZXNzYWdlIiwiRXJyb3IiLCJnZXRBcHBTZWNyZXRzIiwiZ2V0QmxvY2tjaGFpblNlY3JldHMiLCJnZXRGaXJlYmFzZVNlcnZpY2VBY2NvdW50Iiwic2VydmljZUFjY291bnQiLCJwcml2YXRlX2tleSIsInJlcGxhY2UiLCJjbGVhckNhY2hlIiwiY2xlYXIiLCJpc0FXU0Vudmlyb25tZW50IiwiTk9ERV9FTlYiLCJVU0VfQVdTX1NFQ1JFVFMiXSwic291cmNlcyI6WyJhd3NTZWNyZXRzTWFuYWdlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZWNyZXRzTWFuYWdlckNsaWVudCwgR2V0U2VjcmV0VmFsdWVDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXNlY3JldHMtbWFuYWdlcic7XG5cbmNsYXNzIEFXU1NlY3JldHNNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5jbGllbnQgPSBuZXcgU2VjcmV0c01hbmFnZXJDbGllbnQoe1xuICAgICAgcmVnaW9uOiBwcm9jZXNzLmVudi5BV1NfUkVHSU9OIHx8ICd1cy1lYXN0LTEnXG4gICAgfSk7XG4gICAgdGhpcy5jYWNoZSA9IG5ldyBNYXAoKTtcbiAgICB0aGlzLmNhY2hlVGltZW91dCA9IDUgKiA2MCAqIDEwMDA7IC8vIDUgbWludXRlcyBjYWNoZVxuICB9XG5cbiAgYXN5bmMgZ2V0U2VjcmV0KHNlY3JldE5hbWUpIHtcbiAgICAvLyBDaGVjayBjYWNoZSBmaXJzdFxuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuY2FjaGUuZ2V0KHNlY3JldE5hbWUpO1xuICAgIGlmIChjYWNoZWQgJiYgRGF0ZS5ub3coKSAtIGNhY2hlZC50aW1lc3RhbXAgPCB0aGlzLmNhY2hlVGltZW91dCkge1xuICAgICAgcmV0dXJuIGNhY2hlZC5kYXRhO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBjb21tYW5kID0gbmV3IEdldFNlY3JldFZhbHVlQ29tbWFuZCh7XG4gICAgICAgIFNlY3JldElkOiBzZWNyZXROYW1lLFxuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5jbGllbnQuc2VuZChjb21tYW5kKTtcbiAgICAgIGNvbnN0IHNlY3JldFZhbHVlID0gSlNPTi5wYXJzZShyZXNwb25zZS5TZWNyZXRTdHJpbmcpO1xuXG4gICAgICAvLyBDYWNoZSB0aGUgcmVzdWx0XG4gICAgICB0aGlzLmNhY2hlLnNldChzZWNyZXROYW1lLCB7XG4gICAgICAgIGRhdGE6IHNlY3JldFZhbHVlLFxuICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KClcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gc2VjcmV0VmFsdWU7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEZhaWxlZCB0byByZXRyaWV2ZSBzZWNyZXQgJHtzZWNyZXROYW1lfTpgLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgQVdTIFNlY3JldHMgTWFuYWdlciBlcnJvcjogJHtlcnJvci5tZXNzYWdlfWApO1xuICAgIH1cbiAgfVxuXG4gIGFzeW5jIGdldEFwcFNlY3JldHMoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U2VjcmV0KCdDcnlwdG9Fc2Nyb3cvQXBwL0NvbmZpZycpO1xuICB9XG5cbiAgYXN5bmMgZ2V0QmxvY2tjaGFpblNlY3JldHMoKSB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0U2VjcmV0KCdDcnlwdG9Fc2Nyb3cvQmxvY2tjaGFpbi9LZXlzJyk7XG4gIH1cblxuICBhc3luYyBnZXRGaXJlYmFzZVNlcnZpY2VBY2NvdW50KCkge1xuICAgIGNvbnN0IHNlcnZpY2VBY2NvdW50ID0gYXdhaXQgdGhpcy5nZXRTZWNyZXQoJ0NyeXB0b0VzY3Jvdy9GaXJlYmFzZS9TZXJ2aWNlQWNjb3VudCcpO1xuICAgIFxuICAgIC8vIEZpeCB0aGUgcHJpdmF0ZSBrZXkgZm9ybWF0dGluZyAtIHVuZXNjYXBlIHRoZSBuZXdsaW5lc1xuICAgIGlmIChzZXJ2aWNlQWNjb3VudCAmJiBzZXJ2aWNlQWNjb3VudC5wcml2YXRlX2tleSkge1xuICAgICAgc2VydmljZUFjY291bnQucHJpdmF0ZV9rZXkgPSBzZXJ2aWNlQWNjb3VudC5wcml2YXRlX2tleS5yZXBsYWNlKC9cXFxcbi9nLCAnXFxuJyk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBzZXJ2aWNlQWNjb3VudDtcbiAgfVxuXG4gIC8vIE1ldGhvZCB0byBjbGVhciBjYWNoZSAodXNlZnVsIGZvciB0ZXN0aW5nIG9yIGZvcmNlZCByZWZyZXNoKVxuICBjbGVhckNhY2hlKCkge1xuICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgfVxuXG4gIC8vIE1ldGhvZCB0byBjaGVjayBpZiBydW5uaW5nIGluIEFXUyBlbnZpcm9ubWVudFxuICBpc0FXU0Vudmlyb25tZW50KCkge1xuICAgIHJldHVybiBwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nIHx8IHByb2Nlc3MuZW52LlVTRV9BV1NfU0VDUkVUUyA9PT0gJ3RydWUnO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IG5ldyBBV1NTZWNyZXRzTWFuYWdlcigpOyAiXSwibWFwcGluZ3MiOiJBQUFBLFNB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