{"version":3,"names":["jest","describe","it","expect","beforeEach","afterAll","beforeAll","Timestamp","admin","adminFirestore","PROJECT_ID","getDealsPastFinalApproval","getDealsPastDisputeDeadline","updateDealStatusInDB","deleteAdminApp","cleanUpFirestore","collections","listCollections","collection","id","docs","listDocuments","deletePromises","map","doc","delete","Promise","all","dealsCollection","console","log","DEFAULT_APP_NAME","apps","find","app","name","initializeApp","projectId","Date","now","oneHourAgo","fromMillis","toMillis","oneHourFromNow","set","status","finalApprovalDeadlineBackend","propertyAddress","deals","toHaveLength","d","sort","toEqual","oneDayAgo","oneDayFromNow","disputeResolutionDeadlineBackend","toBe","dealId","timeline","newStatus","eventMessage","txHash","timelineEventMessage","autoReleaseTxHash","updatedDeal","get","exists","dealData","data","updatedAt","toBeInstanceOf","event","systemTriggered","transactionHash","timestamp","consoleErrorSpy","spyOn","mockImplementation","toHaveBeenCalledWith","objectContaining","updateData","mockRestore"],"sources":["databaseService.integration.test.js"],"sourcesContent":["// src/services/__tests__/databaseService.test.js\nimport { jest, describe, it, expect, beforeEach, afterAll, beforeAll } from '@jest/globals';\nimport { Timestamp } from 'firebase-admin/firestore';\nimport admin from 'firebase-admin'; // Import admin\nimport { adminFirestore, PROJECT_ID } from '../../../../jest.emulator.setup.js'; // Adjust path as needed\nimport {\n  getDealsPastFinalApproval,\n  getDealsPastDisputeDeadline,\n  updateDealStatusInDB,\n} from '../../databaseService.js'; // Adjust path as needed\nimport { deleteAdminApp } from '../../../api/routes/auth/admin.js'; // Adjust path as needed\n\n// Helper to clean up Firestore data\nasync function cleanUpFirestore() {\n  const collections = await adminFirestore.listCollections();\n  for (const collection of collections) {\n    if (collection.id === 'deals') { // Only clear 'deals' for these tests\n      const docs = await collection.listDocuments();\n      const deletePromises = docs.map(doc => doc.delete());\n      await Promise.all(deletePromises);\n    }\n  }\n}\n\ndescribe('Database Service Tests', () => {\n  // Use a unique collection name for tests if needed, or ensure clean slate\n  const dealsCollection = adminFirestore.collection('deals');\n  // let db; // This was not used meaningfully\n\n  beforeAll(async () => {\n    // Ensure emulators are running and connected\n    console.log(`[DB Service Tests] Using Project ID: ${PROJECT_ID} and Firestore emulator.`);\n\n    // Initialize Firebase Admin SDK for tests if not already initialized\n    // This ensures that admin.firestore() in databaseService.js can find the default app\n    const DEFAULT_APP_NAME = '[DEFAULT]';\n    if (!admin.apps.find(app => app && app.name === DEFAULT_APP_NAME)) {\n        console.log(`[DB Service Tests BeforeAll] Initializing default Firebase app for databaseService tests.`);\n        admin.initializeApp({\n            projectId: PROJECT_ID || `db-service-tests-${Date.now()}`, // Use PROJECT_ID from emulator setup\n            // Add other configurations if necessary, e.g., storageBucket, but FIRESTORE_EMULATOR_HOST should be picked up\n        });\n    } else {\n        console.log(`[DB Service Tests BeforeAll] Default Firebase app already initialized.`);\n    }\n\n    // databaseService.js, when NODE_ENV === 'test', should now pick up\n    // the default app initialized by jest.emulator.setup.js or by the code above.\n  });\n\n  beforeEach(async () => {\n    await cleanUpFirestore(); // Clear 'deals' collection before each test\n  });\n\n  afterAll(async () => {\n    await cleanUpFirestore();\n    // If adminApp was initialized by databaseService or its imports, ensure it's cleaned up\n    // This might be handled by a global afterAll in jest.setup.js if adminApp is shared\n    // For now, assuming jest.emulator.setup.js handles its own adminApp lifecycle or it's managed elsewhere.\n    // await deleteAdminApp(); // Uncomment if adminApp used by service needs explicit cleanup here\n  });\n\n  describe('getDealsPastFinalApproval', () => {\n    it('should return deals that are IN_FINAL_APPROVAL and past their deadline', async () => {\n      const now = Timestamp.now();\n      const oneHourAgo = Timestamp.fromMillis(now.toMillis() - 60 * 60 * 1000);\n      const oneHourFromNow = Timestamp.fromMillis(now.toMillis() + 60 * 60 * 1000);\n\n      await dealsCollection.doc('deal1').set({\n        status: 'IN_FINAL_APPROVAL',\n        finalApprovalDeadlineBackend: oneHourAgo, // Past deadline\n        propertyAddress: '123 Main St',\n      });\n      await dealsCollection.doc('deal2').set({\n        status: 'IN_FINAL_APPROVAL',\n        finalApprovalDeadlineBackend: oneHourFromNow, // Future deadline\n        propertyAddress: '456 Oak Ave',\n      });\n      await dealsCollection.doc('deal3').set({\n        status: 'AWAITING_FULFILLMENT', // Wrong status\n        finalApprovalDeadlineBackend: oneHourAgo,\n        propertyAddress: '789 Pine Ln',\n      });\n      await dealsCollection.doc('deal4').set({\n        status: 'IN_FINAL_APPROVAL',\n        finalApprovalDeadlineBackend: oneHourAgo, // Past deadline\n        propertyAddress: '101 Maple Dr',\n      });\n       await dealsCollection.doc('deal5').set({\n        status: 'IN_FINAL_APPROVAL',\n        // No deadline set, should not be picked up\n        propertyAddress: '202 Birch Rd',\n      });\n\n\n      const deals = await getDealsPastFinalApproval();\n      expect(deals).toHaveLength(2);\n      expect(deals.map(d => d.id).sort()).toEqual(['deal1', 'deal4'].sort());\n    });\n\n    it('should return an empty array if no deals match', async () => {\n      const now = Timestamp.now();\n      const oneHourFromNow = Timestamp.fromMillis(now.toMillis() + 60 * 60 * 1000);\n      await dealsCollection.doc('deal1').set({\n        status: 'IN_FINAL_APPROVAL',\n        finalApprovalDeadlineBackend: oneHourFromNow,\n      });\n      const deals = await getDealsPastFinalApproval();\n      expect(deals).toHaveLength(0);\n    });\n  });\n\n  describe('getDealsPastDisputeDeadline', () => {\n    it('should return deals that are IN_DISPUTE and past their deadline', async () => {\n      const now = Timestamp.now();\n      const oneDayAgo = Timestamp.fromMillis(now.toMillis() - 24 * 60 * 60 * 1000);\n      const oneDayFromNow = Timestamp.fromMillis(now.toMillis() + 24 * 60 * 60 * 1000);\n\n      await dealsCollection.doc('dispute1').set({\n        status: 'IN_DISPUTE',\n        disputeResolutionDeadlineBackend: oneDayAgo, // Past deadline\n        propertyAddress: 'Dispute Prop 1',\n      });\n      await dealsCollection.doc('dispute2').set({\n        status: 'IN_DISPUTE',\n        disputeResolutionDeadlineBackend: oneDayFromNow, // Future deadline\n        propertyAddress: 'Dispute Prop 2',\n      });\n       await dealsCollection.doc('dispute3').set({\n        status: 'IN_FINAL_APPROVAL', // Wrong status\n        disputeResolutionDeadlineBackend: oneDayAgo,\n        propertyAddress: 'Dispute Prop 3',\n      });\n\n      const deals = await getDealsPastDisputeDeadline();\n      expect(deals).toHaveLength(1);\n      expect(deals[0].id).toBe('dispute1');\n    });\n\n    it('should return an empty array if no deals match', async () => {\n      const deals = await getDealsPastDisputeDeadline();\n      expect(deals).toHaveLength(0);\n    });\n  });\n\n  describe('updateDealStatusInDB', () => {\n    it('should update deal status and add a timeline event', async () => {\n      const dealId = 'dealToUpdate';\n      await dealsCollection.doc(dealId).set({\n        status: 'IN_FINAL_APPROVAL',\n        propertyAddress: 'Update Test Prop',\n        timeline: [],\n      });\n\n      const newStatus = 'COMPLETED';\n      const eventMessage = 'Deal automatically completed.';\n      const txHash = '0x123abc';\n\n      await updateDealStatusInDB(dealId, {\n        status: newStatus,\n        timelineEventMessage: eventMessage,\n        autoReleaseTxHash: txHash // Assuming this is the relevant hash field based on usage\n      });\n\n      const updatedDeal = await dealsCollection.doc(dealId).get();\n      expect(updatedDeal.exists).toBe(true);\n      const dealData = updatedDeal.data();\n      expect(dealData.status).toBe(newStatus);\n      expect(dealData.updatedAt).toBeInstanceOf(Timestamp);\n      expect(dealData.timeline).toHaveLength(1);\n      expect(dealData.timeline[0].event).toBe(eventMessage);\n      expect(dealData.timeline[0].systemTriggered).toBe(true);\n      expect(dealData.timeline[0].transactionHash).toBe(txHash);\n      expect(dealData.timeline[0].timestamp).toBeInstanceOf(Timestamp);\n    });\n\n    it('should not throw if dealId is invalid but log an error (or handle as per implementation)', async () => {\n      const consoleErrorSpy = jest.spyOn(console, 'error').mockImplementation(() => {});\n      await updateDealStatusInDB(null, { \n        status: 'COMPLETED', \n        timelineEventMessage: 'Test event' \n      });\n      expect(consoleErrorSpy).toHaveBeenCalledWith(\n        \"[DBService] Invalid parameters for updateDealStatusInDB:\",\n        expect.objectContaining({ dealId: null, updateData: expect.objectContaining({ status: 'COMPLETED' }) })\n      );\n      consoleErrorSpy.mockRestore();\n    });\n  });\n}); "],"mappings":"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","ignoreList":[]}